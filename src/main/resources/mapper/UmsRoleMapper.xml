<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wtf.oauth.mapper.UmsRoleMapper">
  <resultMap id="BaseResultMap" type="com.wtf.oauth.po.UmsRole">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="parent_id" jdbcType="BIGINT" property="parentId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="enname" jdbcType="VARCHAR" property="enname" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="ums_roleColumns">
    <![CDATA[ id, parent_id,name,enname,description,create_time ]]>
  </sql>
  <sql id="ums_roleDynamicWhere">
    <where>
      <if test="null != id and '' !=  id">and id = #{ id}</if>
      <if test="null != parentId and '' !=  parentId">and parent_id = #{ parentId}</if>
      <if test="null != name and '' !=  name">and name = #{ name}</if>
      <if test="null != enname and '' !=  enname">and enname = #{ enname}</if>
      <if test="null != description and '' !=  description">and description = #{ description}</if>
      <if test="null != createTime and '' !=  createTime">and create_time = #{ createTime}</if>
	</where>
  </sql>
  <sql id="ums_roleDynamicLikeWhere">
    <where>
      <if test="null != id and '' !=  id">and id LIKE #{ id}</if>
      <if test="null != parentId and '' !=  parentId">and parent_id LIKE #{ parentId}</if>
      <if test="null != name and '' !=  name">and name LIKE #{ name}</if>
      <if test="null != enname and '' !=  enname">and enname LIKE #{ enname}</if>
      <if test="null != description and '' !=  description">and description LIKE #{ description}</if>
      <if test="null != createTime and '' !=  createTime">and create_time LIKE #{ createTime}</if>
	</where>
  </sql>
  <select id="getById" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select <include refid="ums_roleColumns" /> from  `ums_role` where id = #{id}
  </select>
  <select id="getOne" parameterType="com.wtf.oauth.po.UmsRole" resultMap="BaseResultMap">
    select <include refid="ums_roleColumns" /> from  `ums_role` <include refid="ums_roleDynamicWhere" /> limit 0 , 1
  </select>
  <select id="list" parameterType="map" resultMap="BaseResultMap">
    select <include refid="ums_roleColumns" /> from  `ums_role` <include refid="ums_roleDynamicWhere" />
	<if test="orderBy != null and orderBy != ''">
          order by ${orderBy}
      </if>
  </select>
  <select id="listPage" parameterType="map" resultMap="BaseResultMap">
    select <include refid="ums_roleColumns" /> from  `ums_role` <include refid="ums_roleDynamicWhere" />
	<if test="orderBy != null">
            order by ${orderBy}
        </if>
        <if test="fromIndex != null and fromIndex > -1 and pageSize != null and pageSize > 0">
            limit #{fromIndex},#{pageSize}
        </if>
  </select>
  <select id="listLikePage" parameterType="map" resultMap="BaseResultMap">
    select <include refid="ums_roleColumns" /> from  `ums_role` <include refid="ums_roleDynamicLikeWhere" />
	<if test="orderBy != null">
            order by ${orderBy}
        </if>
        <if test="fromIndex != null and fromIndex > -1 and pageSize != null and pageSize > 0">
            limit #{fromIndex},#{pageSize}
        </if>
  </select>
  <select id="countLike" parameterType="com.wtf.oauth.po.UmsRole" resultType="java.lang.Long">
    select count(1) from `ums_role` <include refid="ums_roleDynamicLikeWhere" />
  </select>
  <select id="count" parameterType="com.wtf.oauth.po.UmsRole" resultType="java.lang.Long">
    select count(1) from `ums_role` <include refid="ums_roleDynamicWhere" />
  </select>
  <sql id="save_ums_role_columns">
    insert into `ums_role`(
		parent_id ,name ,enname ,description ,create_time
	) values
  </sql>
  <sql id="save_ums_role_values">
    (
	  #{ parentId,jdbcType=BIGINT},
	  #{ name,jdbcType=VARCHAR},
	  #{ enname,jdbcType=VARCHAR},
	  #{ description,jdbcType=VARCHAR},
	  #{ createTime,jdbcType=TIMESTAMP}
	)
  </sql>
  <insert id="save" keyProperty="id" parameterType="com.wtf.oauth.po.UmsRole" useGeneratedKeys="true">
    <include refid="save_ums_role_columns" /><include refid="save_ums_role_values" />
  </insert>
  <insert id="batchSave" parameterType="list">
    <foreach collection="list" index="index" item="item" open="" separator=";" close="">
	  <include refid="save_ums_role_columns" /><include refid="save_ums_role_values" />
	</foreach>
  </insert>
  <sql id="ums_roleUpdate">
    update `ums_role` 
	<set> 
      <if test="null != parentId">parent_id = #{ parentId,jdbcType=BIGINT},</if>
      <if test="null != name">name = #{ name,jdbcType=VARCHAR},</if>
      <if test="null != enname">enname = #{ enname,jdbcType=VARCHAR},</if>
      <if test="null != description">description = #{ description,jdbcType=VARCHAR},</if>
      <if test="null != createTime">create_time = #{ createTime,jdbcType=TIMESTAMP}</if>
	</set>
	where id = #{id}
  </sql>
  <update id="update" parameterType="com.wtf.oauth.po.UmsRole">
    <include refid="ums_roleUpdate" />
  </update>
  <update id="batchUpdate" parameterType="list">
    <foreach collection="list" index="index" item="item" open="" separator=";" close="">
	  <include refid="ums_roleUpdate" />
	</foreach>
  </update>
  <delete id="delById">
    <![CDATA[ delete from `ums_role` where id = #{id} ]]>
  </delete>
  <delete id="delArray">
    delete from `ums_role` where id in
	<foreach collection="array" index="index" item="item" open="(" separator="," close=")">#{item}</foreach>
  </delete>
  <delete id="delList">
    delete from `ums_role` where id in
	<foreach collection="list" index="index" item="item" open="(" separator="," close=")">#{item}</foreach>
  </delete>
</mapper>