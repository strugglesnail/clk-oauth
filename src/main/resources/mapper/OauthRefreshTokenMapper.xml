<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wtf.oauth.mapper.OauthRefreshTokenMapper">
  <resultMap id="BaseResultMap" type="com.wtf.oauth.po.OauthRefreshToken">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="token_id" jdbcType="VARCHAR" property="tokenId" />
    <result column="token" jdbcType="LONGVARBINARY" property="token" />
    <result column="authentication" jdbcType="LONGVARBINARY" property="authentication" />
  </resultMap>
  <sql id="oauth_refresh_tokenColumns">
    <![CDATA[ id,token_id,token,authentication ]]>
  </sql>
  <sql id="oauth_refresh_tokenDynamicWhere">
    <where>
      <if test="null != id and '' !=  id">and id = #{ id}</if>
      <if test="null != tokenId and '' !=  tokenId">and token_id = #{ tokenId}</if>
      <if test="null != token and '' !=  token">and token = #{ token}</if>
      <if test="null != authentication and '' !=  authentication">and authentication = #{ authentication}</if>
	</where>
  </sql>
  <sql id="oauth_refresh_tokenDynamicLikeWhere">
    <where>
      <if test="null != id and '' !=  id">and id LIKE #{ id}</if>
      <if test="null != tokenId and '' !=  tokenId">and token_id LIKE #{ tokenId}</if>
      <if test="null != token and '' !=  token">and token LIKE #{ token}</if>
      <if test="null != authentication and '' !=  authentication">and authentication LIKE #{ authentication}</if>
	</where>
  </sql>
  <select id="getById" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select <include refid="oauth_refresh_tokenColumns" /> from  `oauth_refresh_token` where id = #{id}
  </select>
  <select id="getOne" parameterType="com.wtf.oauth.po.OauthRefreshToken" resultMap="BaseResultMap">
    select <include refid="oauth_refresh_tokenColumns" /> from  `oauth_refresh_token` <include refid="oauth_refresh_tokenDynamicWhere" /> limit 0 , 1
  </select>
  <select id="list" parameterType="map" resultMap="BaseResultMap">
    select <include refid="oauth_refresh_tokenColumns" /> from  `oauth_refresh_token` <include refid="oauth_refresh_tokenDynamicWhere" />
	<if test="orderBy != null and orderBy != ''">
          order by ${orderBy}
      </if>
  </select>
  <select id="listPage" parameterType="map" resultMap="BaseResultMap">
    select <include refid="oauth_refresh_tokenColumns" /> from  `oauth_refresh_token` <include refid="oauth_refresh_tokenDynamicWhere" />
	<if test="orderBy != null">
            order by ${orderBy}
        </if>
        <if test="fromIndex != null and fromIndex > -1 and pageSize != null and pageSize > 0">
            limit #{fromIndex},#{pageSize}
        </if>
  </select>
  <select id="listLikePage" parameterType="map" resultMap="BaseResultMap">
    select <include refid="oauth_refresh_tokenColumns" /> from  `oauth_refresh_token` <include refid="oauth_refresh_tokenDynamicLikeWhere" />
	<if test="orderBy != null">
            order by ${orderBy}
        </if>
        <if test="fromIndex != null and fromIndex > -1 and pageSize != null and pageSize > 0">
            limit #{fromIndex},#{pageSize}
        </if>
  </select>
  <select id="countLike" parameterType="com.wtf.oauth.po.OauthRefreshToken" resultType="java.lang.Long">
    select count(1) from `oauth_refresh_token` <include refid="oauth_refresh_tokenDynamicLikeWhere" />
  </select>
  <select id="count" parameterType="com.wtf.oauth.po.OauthRefreshToken" resultType="java.lang.Long">
    select count(1) from `oauth_refresh_token` <include refid="oauth_refresh_tokenDynamicWhere" />
  </select>
  <sql id="save_oauth_refresh_token_columns">
    insert into `oauth_refresh_token`(
		token_id ,token ,authentication
	) values
  </sql>
  <sql id="save_oauth_refresh_token_values">
    (
	  #{ tokenId,jdbcType=VARCHAR},
	  #{ token,jdbcType=LONGVARBINARY},
	  #{ authentication,jdbcType=LONGVARBINARY}
	)
  </sql>
  <insert id="save" keyProperty="id" parameterType="com.wtf.oauth.po.OauthRefreshToken" useGeneratedKeys="true">
    <include refid="save_oauth_refresh_token_columns" /><include refid="save_oauth_refresh_token_values" />
  </insert>
  <insert id="batchSave" parameterType="list">
    <foreach collection="list" index="index" item="item" open="" separator=";" close="">
	  <include refid="save_oauth_refresh_token_columns" /><include refid="save_oauth_refresh_token_values" />
	</foreach>
  </insert>
  <sql id="oauth_refresh_tokenUpdate">
    update `oauth_refresh_token` 
	<set> 
      <if test="null != tokenId">token_id = #{ tokenId,jdbcType=VARCHAR},</if>
      <if test="null != token">token = #{ token,jdbcType=LONGVARBINARY},</if>
      <if test="null != authentication">authentication = #{ authentication,jdbcType=LONGVARBINARY}</if>
	</set>
	where id = #{id}
  </sql>
  <update id="update" parameterType="com.wtf.oauth.po.OauthRefreshToken">
    <include refid="oauth_refresh_tokenUpdate" />
  </update>
  <update id="batchUpdate" parameterType="list">
    <foreach collection="list" index="index" item="item" open="" separator=";" close="">
	  <include refid="oauth_refresh_tokenUpdate" />
	</foreach>
  </update>
  <delete id="delById">
    <![CDATA[ delete from `oauth_refresh_token` where id = #{id} ]]>
  </delete>
  <delete id="delArray">
    delete from `oauth_refresh_token` where id in
	<foreach collection="array" index="index" item="item" open="(" separator="," close=")">#{item}</foreach>
  </delete>
  <delete id="delList">
    delete from `oauth_refresh_token` where id in
	<foreach collection="list" index="index" item="item" open="(" separator="," close=")">#{item}</foreach>
  </delete>
</mapper>